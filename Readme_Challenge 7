### üìò **Code Explanation**  
1. **Input for Number of Scores**  
   ```python
   n = int(input("Please enter the number of scores: "))
   ```
   - **Purpose**: Prompts the user to enter the number of scores they will input.  
   - **How it works**:  
     - The `input()` function reads the user's input as a string.  
     - `int()` converts this input into an integer and assigns it to the variable `n`.  
     - This variable `n` represents how many scores the user plans to provide.  

2. **Input for List of Scores**  
   ```python
   arr = list(map(int, input("Enter the scores separated by spaces: ").split()))
   ```
   - **Purpose**: Collects a list of integer scores from the user.  
   - **How it works**:  
     - `input()` prompts the user to enter multiple scores, separated by spaces.  
     - `.split()` splits the input string into individual elements (by default, it splits on spaces).  
     - `map(int, ...)` converts each string in the list into an integer.  
     - `list()` creates a list of these integers and assigns it to the variable `arr`.  

### **Why We Need `list()` Around `map()`**
In **Python 3**, `map()` does not return a list as it did in **Python 2**. Instead, it returns a **map object**, which is an **iterator**. Iterators produce values **on demand** (they are "lazy"),
meaning they do not store the results in memory as a complete list. 

To actually **see** and **use** the mapped values as a list (which is more convenient for most use cases), we need to convert the map object to a list using `list(map(...))`. 

---

### **What's Wrong Without `list()`?**
If you don't use `list()`, like this:
```python
arr = map(int, input("Enter the scores separated by spaces: ").split())
```
1. **`arr` is not a list**, it is a `map object` (like a generator).  
2. You cannot directly **index** or **print** the map like a list. For example:  
   ```python
   print(arr[0])  # ‚ùå Error: 'map' object is not subscriptable
   ```
3. If you try to iterate over `arr` (like in a loop), you **consume the iterator**. If you try to loop over it again, it will be empty, as iterators are exhausted once used.  

---

### **Solution**
To store the mapped values as a list, you need to wrap it in `list()`, like this:  
```python
arr = list(map(int, input("Enter the scores separated by spaces: ").split()))
```
Now, `arr` is a **proper list**. You can access elements like `arr[0]`, re-use it in multiple loops, and print it directly.

---

### **Summary**
- **Without `list()`**: `map()` returns an iterator, not a list.  
- **With `list()`**: You get a usable list with all the values converted from strings to integers.  

This change was introduced in Python 3 to make `map()` more memory efficient. By using an iterator, Python can process large datasets without creating a huge list in memory.
However, for small inputs like user-entered data, it‚Äôs more convenient to convert it back to a list.

**Example Walkthrough**  
- **User Input 1**: `Please enter the number of scores: 5` (The user enters **5**)  
- **User Input 2**: `Enter the scores separated by spaces: 78 85 90 66 72`  
- **Result**:  
  - `n = 5` (indicating 5 scores)  
  - `arr = [78, 85, 90, 66, 72]` (a list of the 5 entered scores)  

---

### ‚úçÔ∏è **How to Use This Code**
1. Run the script in Python.  
2. Follow the prompts to enter the number of scores and the scores themselves.  
3. The scores will be stored as a list in the variable `arr`, which you can then process for further analysis (like finding the maximum, average, etc.).  

